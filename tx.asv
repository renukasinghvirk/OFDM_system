function [txsignal conf] = tx(txbits,conf,k)
% Digital Transmitter consisting of:
    %       - 
    %       - 
    %       -  
    %
    %   txbits  : Information bits
    %   conf    : Universal configuration structure
    %   k       : Frame index
    
    %% BPSK Preamble
    preamble_bits = lfsr_framesync(50);  % 50-bit preamble
    preamble_symbols = -2 * (preamble_bits) + 1;  % BPSK mapping  
    disp(conf.os_factor)
    preamble_up = upsample(preamble_symbols, conf.os_factor_preamble);
    preamble_up = preamble_up(:); % Force column vector
    
    %% BPSK Training OFDM
    training_bits = lfsr_framesync(conf.N_subcarriers); % 256-bit training
    training_symbols = -2 * (training_bits) + 1;  % BPSK mapping   

    %% OFDM training through osIFFT
    training_osifft = osifft(training_symbols, conf.os_factor);

    %% normaliser

    training_osifft = training_osifft / sqrt(mean(abs(training_osifft).^2));

    %% QPSK Mapping OFDM
    bits = 2 * (txbits - 0.5); % Convert bits to [-1, 1]
    bits2 = reshape(bits, 2, []);
    real_p = ((bits2(1,:) > 0) - 0.5) * sqrt(2);
    imag_p = ((bits2(2,:) > 0) - 0.5) * sqrt(2);
    symbols = real_p + 1i * imag_p;


    %% Check data size is multiple of N (256) => add padding, mention for presentation

    %% OFDM data through osIFFT
    num_packets = length(symbols)/conf.N_subcarriers;
    disp('Num packets');
    disp(num_packets);
    data_osifft = [];

    for i=1:num_packets
        disp('packet ');
        disp(i);
        packet_osifft = osifft(symbols((i-1)*256+1:i*256), conf.os_factor); %((i-1)*256+1:i*256+1)
        disp()
        % add 50% of packet_osifft as cyclic prefix
        mid_idx = ceil(conf.N_subcarriers/2);
        cyclic_prefix = packet_osifft(mid_idx:end);
        packet_osifft = [cyclic_prefix; packet_osifft];
        % P/S 
        data_osifft = [data_osifft; packet_osifft];
    end
    
    %% normaliser

    data_osifft = data_osifft/sqrt(mean(abs(data_osifft).^2));

    %% Pulse shape preamble
    pulse = rrc(conf.os_factor_preamble, 0.22, 2000); % Root Raised Cosine filter for preamble
    filtered_preamble = conv(preamble_up, pulse.', 'full');
    disp(conf.os_factor_preamble);
    
    %% normaliser preamble
    
    filtered_preamble = filtered_preamble / sqrt(mean(abs(filtered_preamble).^2));
    
    %% Combine preamble, OFDM training, OFDM data
    tx_signal = [filtered_preamble; training_osifft(:); data_osifft(:)];

    %% Up-conversion
    % Time vector
    time = (0:length(tx_signal)-1).' / conf.f_s;

    % Generate the complex exponential carrier
    % SHOULD WE TAKE fc/fs * n?
    complex_carrier = exp(1i * 2 * pi * conf.f_c * time);

    % Perform up-conversion
    upconverted_signal = tx_signal .* complex_carrier;

    % Take the real part of the upconverted signal
    txsignal = real(upconverted_signal);
%     disp('Txsignal: ');
%     disp(size(txsignal));
%     disp('Preamble signal: ');
%     disp(size(filtered_preamble));
%     disp('Training signal: ');
%     disp(size(training_osifft));
%     disp('Data signal: ');
%     disp(size(data_osifft));



    % Plot txsignal
    plot_txsignal(filtered_preamble, training_osifft, txsignal, conf, num_packets)


end
